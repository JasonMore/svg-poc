{
  "name": "grunt-external-daemon",
  "description": "Grunt.js task to launch external background processes",
  "version": "1.1.0",
  "homepage": "https://github.com/jlindsey/grunt-external-daemon",
  "author": {
    "name": "Josh Lindsey",
    "email": "joshua.s.lindsey@gmail.com"
  },
  "contributors": [
    {
      "name": "Chase Douglas",
      "email": "chasedouglas@gmail.com"
    }
  ],
  "license": {
    "type": "MIT",
    "url": "https://github.com/jlindsey/grunt-external-daemon/blob/master/LICENSE"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:jlindsey/grunt-external-daemon.git"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt"
  },
  "dependencies": {
    "underscore": "~> 1.4.4"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-cli": "~0.1.6",
    "grunt-contrib-clean": "~0.4.1",
    "grunt-contrib-watch": "~0.4.3",
    "grunt-contrib-jshint": "~0.4.3",
    "grunt-contrib-nodeunit": "~0.1.2",
    "connect": "~2.7.9",
    "jquery": "~1.8.3",
    "touch": "0.0.2"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "grunt",
    "node",
    "gruntplugin",
    "daemon",
    "development",
    "process",
    "background"
  ],
  "readme": "# grunt-external-daemon [![Build Status](https://travis-ci.org/jlindsey/grunt-external-daemon.png?branch=master)](https://travis-ci.org/jlindsey/grunt-external-daemon)\n\nGrunt Task to start external background processes.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-external-daemon --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-external-daemon');\n```\n\n*This plugin was designed to work with Grunt 0.4.x. If you're still using grunt v0.3.x it's strongly recommended that [you upgrade](http://gruntjs.com/upgrading-from-0.3-to-0.4), but in case you can't please use [v0.3.2](https://github.com/gruntjs/grunt-contrib-coffee/tree/grunt-0.3-stable).*\n\n## External Daemon task\n_Run this task with the `grunt external_daemon` command._\n\nDifferent daemons to run and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n\n### Params\n#### cmd\nType: `string`\n\nThe command to run. If passed in a path, this will be normalized first. Can be a [Grunt template](http://gruntjs.com/configuring-tasks#templates).\n\n#### args\nType: `Array[String]`\n\nArguments to pass to the command. This is passed to the underlying node `child_process.spawn` function.\n\nArray items will be processed as Grunt templates.\n\n### Options\n\n#### verbose\nType: `boolean`\nDefault: `false`\n\nPrint stderr and stdout output from the daemon process with the Grunt output. Even with this disabled, output can be viewed by \nrunning Grunt with the `--verbose` flag.\n\n#### nodeSpawnOptions\nType: `object`\nDefault: `{}`\n\nList of options to pass to the underlying node `child_process.spawn` command. See the [node docs](http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options) for more details.\n\n#### startCheck\nType: `function(stdout, stderr)`\nDefault: `function () { return true; }`\n\nA function to check whether the process has started up and is ready. It should return `true` when whatever criteria used to determine\nreadiness are met. The default is a function that simply returns `true`, meaning it will assume your process is immediately ready to go\nupon starting. The task will block until this process returns true or the timeout has elapsed (see below).\n\nThis is useful when you are starting a daemon process in the middle of a Grunt task chain and subsequent tasks require this daemon to be \nrunning before executing themselves. For instance, starting a node server with [grunt-develop](https://github.com/edwardhotchkiss/grunt-develop)\nthat requires a running CouchDB instance.\n\n#### startCheckInterval\nType: `float`\nDefault: `0.5`\n\nThe interval in seconds between `startCheck` invocations.\n\n#### startCheckTimeout\nType `float`\nDefault: `5.0`\n\nThe time in seconds before the task times out if `startCheck` has not yet returned `true`.\n\nSetting this to `false` disables the timeout.\n\n#### killSignal\nType: `string`\nDefault: `SIGTERM`\n\nThe signal sent to the process to kill it.\n\n#### stdout\nType: `fd`\nDefault: `undefined`\n\nAn open file descriptor to write stdout of the daemon process to.\n\n#### stderr\nType: `fd`\nDefault: `undefined`\n\nAn open file descriptor to write stderr of the daemon process to. Can be the same stream as `options.stdout`.\n\n### Usage Examples\n\nLaunch a CouchDB instance and wait for it to fully boot.\n\n```js\nexternal_daemon: {\n  couchdb: {\n    options: {\n      startCheck: function(stdout, stderr) {\n        return /Apache CouchDB has started on/.test(stdout);\n      }\n    },\n    cmd: \"couchdb\"\n  }\n}\n```\n\nLaunch a Redis server and get the config path from the Grunt config.\n\n```js\nexternal_daemon: {\n  redis: {\n    cmd: \"redis-server\",\n    args: [\"<%= grunt.config.redis_config_file %>\"]\n  }\n}\n```\n\nLaunch a verbose Memcached server and print the output.\n```js\nexternal_daemon: {\n  memcached: {\n    options: {\n      verbose: true,\n      startCheck: function(stdout, stderr) {\n        return /server listening/.test(stdout);\n      }\n    },\n    cmd: \"memcached\",\n    args: ['-vv']\n  }\n}\n```\n\n## License\n\nCopyright (c) 2013 Joshua Lindsey. See LICENSE for details.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jlindsey/grunt-external-daemon/issues"
  },
  "_id": "grunt-external-daemon@1.1.0",
  "_from": "grunt-external-daemon@"
}
