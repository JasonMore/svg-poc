{
  "name": "connect-cas",
  "description": "Connect middleware for a node CAS client",
  "version": "1.4.0",
  "author": {
    "name": "Duncan Wong",
    "email": "baduncaduncan@gmail.com"
  },
  "license": "MIT",
  "keywords": [
    "cas",
    "central authentication service",
    "authentication",
    "connect",
    "middlware"
  ],
  "directories": {
    "lib": "./lib"
  },
  "engines": {
    "node": "*"
  },
  "scripts": {
    "test": "./node_modules/.bin/mocha --reporter list test/*.spec.js"
  },
  "dependencies": {
    "request": "~2.30.0",
    "lodash": "~2.4.1",
    "q": "~1.0.0",
    "xml2js": "~0.4.1"
  },
  "devDependencies": {
    "mocha": "~1.9.0",
    "should": "~1.2.2",
    "connect": "~2.7.6",
    "express": "~3.2.0",
    "connect-redis": "~1.4.5"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/acemetrix/connect-cas.git"
  },
  "readme": "# Connect CAS\n\nConnect cas is a connect-based middleware that allows you to authenticate through a CAS 2.0+ server.  It supports the gateway auth, single sign-out, and proxying other CAS clients.\n\nAdapted from https://github.com/jmarca/cas_validate\n\n## Installation\n\n    npm install connect-cas\n            \n## Options\n\nMany of these options are borrowed from node's [url documentation](http://nodejs.org/api/url.html).  You may set global options through the `.configure()` method or override them with any of the exposed middleware.\n\n  - `procotol` The protocol to communicate with the CAS Server.  Defaults to 'https'.\n  - `host` CAS server hostname\n  - `port` CAS server port number.  Defaults to 443.\n  - `gateway` Send all validation requests through the CAS gateway feature.  Defaults to false.\n  - `paths`\n    - `serviceValidate` Path to validate TGT\n    - `proxyValidate` Path to validate PGT (not implemented)\n    - `proxy` Path to obtain a proxy ticket\n    - `login` Path to the CAS login\n\n## Usage\n\n```javascript\nvar cas = require('connect-cas');\nvar connect = require('connect');\n\nconnect()\n  .use(connect.cookieParser('hello world'))\n  .use(connect.cookieSession()) // or whatever session store\n  .use(cas.serviceValidate())\n  .use(cas.authenticate())\n```\n\n## Proxy Tickets\n\nTo proxy services, you can configure the `serviceValidate` middleware like below:\n\n```\nconnect()\n  ...\n  .use(cas.serviceValidate({pgtUrl: '/pgtCallback'}))\n  .use(cas.proxyTicket({targetService: 'https://service-to-proxy/blah'});\n  ...\n```\n\nThe proxy granting ticket value will be available in `req.session.pgt` and a hash of proxy tickets are available in `req.pt`.  You may then append that proxy ticket manually to the services you wish to proxy.  To reuse the proxy tickets, see [#25](https://github.com/AceMetrix/connect-cas/issues/25).\n\nYou may also pass in an absolute url if you wish for the pgtCallback to be in a separate app.  If so, pass in an additional `pgtFn`:\n\n```\nconnect()\n.use(cas.serviceValidate({pgtUrl: 'https://some-server.com/pgtCallback', pgtFn:function(pgtIou, cb){\n  // given the pgtIou, retrieve the pgtId however you can.  Then call ...\n  cb(err, 'PGT-thepgtid');\n}));\n```\n\n## Notes\n- If you are behind an https proxy, be sure to set `X-Forwarded-Proto` headers. Connect-cas uses it to infer its own location for redirection.\n\n## License\n\n  MIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/acemetrix/connect-cas/issues"
  },
  "homepage": "https://github.com/acemetrix/connect-cas",
  "_id": "connect-cas@1.4.0",
  "_from": "connect-cas@"
}
