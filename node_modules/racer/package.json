{
  "name": "racer",
  "description": "Realtime model synchronization engine for Node.js",
  "homepage": "http://racerjs.com/",
  "repository": {
    "type": "git",
    "url": "git://github.com/codeparty/racer.git"
  },
  "version": "0.5.11",
  "main": "./lib/index.js",
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "browserify": "~2.14.2",
    "uglify-js": "2.x",
    "node-uuid": "1.x",
    "share": "0.7.x",
    "deep-is": "~0.1.1",
    "arraydiff": "~0.1.1"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "mocha": "~1.9.0",
    "expect.js": "~0.2.0",
    "coffee-script": "~1.6.2",
    "grunt-simple-mocha": "~0.4.0",
    "grunt-contrib-jshint": "~0.4.3"
  },
  "optionalDependencies": {},
  "engines": {
    "node": ">=0.10.0"
  },
  "readme": "# Racer\n\nRacer is a realtime model synchronization engine for Node.js. By leveraging [ShareJS](http://sharejs.org/), multiple users can interact with the same data in realtime via Operational Transformation, a sophisticated conflict resolution algorithm that works in realtime and with offline clients. ShareJS also supports PubSub across multiple servers for horizontal scaling. Clients can express data subscriptions and fetches in terms of queries and specific documents, so different clients can be subscribed to different overlapping sets of data. On top of this sophisticated backend, Racer provides a simple model and event interface for writing application logic.\n\n[![Build\nStatus](https://secure.travis-ci.org/codeparty/racer.png?branch=0.5)](https://travis-ci.org/codeparty/racer/branches)\n\n## Disclaimer\n\nRacer is alpha software. We are now on the road to a production ready version, but we are currently cleaning up the code, finishing loose ends, and testing.\n\nIf you are interested in contributing, please reach out to [Nate](https://github.com/nateps), [Joseph](https://github.com/josephg), and [Brian](https://github.com/bnoguchi).\n\n## Demos\n\nThere are currently two demos, which are included under the examples directory. See [Installation](#installation) below.\n\n### Pad\n\n<!-- http://pad.racerjs.com/home -->\n\nA very simple collaborative [text editor](https://github.com/codeparty/racer/tree/master/examples/pad).\n\n### Todos\n\n<!-- http://todos.racerjs.com/home -->\n\nClassic [todo list](https://github.com/codeparty/racer/tree/master/examples/todos) demonstrating the use of Racer's model methods.\n\n\n## Features\n\n  * **Realtime updates** &ndash; Model methods automatically propagate changes among browser clients and Node servers in realtime. The [racer-browserchannel](https://github.com/codeparty/racer-browserchannel) adapter is recommended for connecting browsers in realtime.\n\n  * **Realtime query subscriptions** &ndash; Clients may subscribe to a limited set of information relevant to the current session. Both document and realtime query subscriptions are supported. Currently, arbitrary Mongo queries are supported.\n\n  * **Conflict resolution** &ndash; Leveraging ShareJS's JSON Operational Transformation algorithm, Racer will emit events that bring conflicting client states into eventual consistency. In addition to their synchronous API, model methods have callbacks for handling the resolved state after a server response.\n\n  * **Immediate interaction** &ndash; Model methods appear to take effect immediately. Meanwhile, Racer sends updates to the server and checks for conflicts. If the updates are successful, they are stored and broadcast to other clients.\n\n  * **Offline** &ndash; Since model methods are applied immediately, clients continue to work offline. Any changes to the local client or the global state automatically sync upon reconnecting.\n\n  * **Unified server and client interface** &ndash; The same model interface can be used on the server for initial page rendering and on the client for user interaction. Racer supports bundling models created on the server and reinitializing them in the same state in the browser.\n\n  * **Persistent storage** &ndash; Racer/ShareJS use [LiveDB](https://github.com/josephg/livedb) to keep a journal of all data operations, publish operations to multiple frontend servers, and automatically persist documents. It currently supports MongoDB, and it can be easily adapted to support other document stores.\n\n  * **Access control** &ndash; (Under development) Racer will have hooks for access control to protect documents from malicious reads and writes.\n\n  * **Solr queries** &ndash; (Under development) A Solr adapter will support updating Solr indices as data change and queries for realtime updated search results.\n\n\n## Future features\n\n  * **Browser local storage** &ndash; Pending changes and offline model data will also sync to HTML5 localStorage for persistent offline usage.\n\n  * **Validation** &ndash; An implementation of shared and non-shared schema-based validation is planned.\n\n\n## Installation\n\nRacer requires [Node v0.10](http://nodejs.org/). You will also need to have a [MongoDB](http://docs.mongodb.org/manual/installation/) and a [Redis](http://redis.io/download) server running on your machine. The examples will connect via the default configurations.\n\n```\n$ npm install racer\n```\n\nThe examples can then be run by:\n\n```\n$ cd node_modules/racer/examples/pad\n$ npm install\n$ node server.js\n```\n\nand\n\n```\n$ cd node_modules/racer/examples/todos\n$ npm install\n$ npm install -g coffee-script\n$ coffee server.coffee\n```\n\n## Tests\n\nRun the tests with\n\n```\n$ npm install -g grunt-cli\n$ grunt test\n```\n\n## Usage\n\nRacer can be used independently as shown in the examples, but Racer and Derby are designed to work especially well together. Racer can also be used along with other MVC frameworks, such as Angular.\n\nFor now, Racer is mostly documented along with Derby. See the Derby [model docs](http://derbyjs.com/#models).\n\n### MIT License\nCopyright (c) 2011 by Brian Noguchi and Nate Smith\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/codeparty/racer/issues"
  },
  "_id": "racer@0.5.11",
  "_from": "racer@~0.5.11"
}
